Please answer the below Data Structure Questions:

why do we need data structure?
A. For proper memory usage and efficiency.

What are the various operations that can be performed on different Data Structures?
A.Insertion, deletion, retrieval.

List out the areas in which data structures are applied extensively?
A.Compiler Design, Operating System, Database Management System, Statistical analysis package, Numerical Analysis, Graphics, Simulation

what is an Array?
A container that holds data.

what is the difference between the Array and ArrayList?
A. Array needs to have the length defined, arraylist does it automatically.

what is LinkedList?
It's like arraylist but nodes are connected for easier removal and insertion.

How is an Array different from Linked List?
Linked List has nodes connected using references to the next and previous node unlike array.

what is queue?
A. A data structure to insert data in First in First out manner.

what is stack?
A dara structure that Inserts data in First in Last out manner.

what is FIFO and LIFO?
A. First in First out, Last in Last out.

what is the order of complexity?
A. How much time it takes for a process to execute.

what is the best case to search an element from an array?
A. O(n)
what is the worst case to search an element from an array?
A. O(n^2)

what is tree in data structure?
A. An  abstract data type that simulates a hierarchical tree structure, with a root value and subtrees of children with a parent node, represented as a set of linked nodes.

what is graph in data structure?
A.A Graph is a non-linear data structure consisting of nodes and edges.

what is the difference between the HashTable and HashMap?
A. Hashtable is synchronized, whereas HashMap is not. This makes HashMap better for non-threaded applications, as unsynchronized Objects typically perform better than synchronized ones.
 HashMap allows one null key and any number of null values.

What are the major data structures used in the following areas : RDBMS, Network data model and Hierarchical data model.
A.Array, graph, tree.

How HashMap works in java?
A. Takes value and assigns it to a key.

What is ArrayIndexOutOfBoundsException in java? When it occurs?
A.ArrayIndexOutOfBoundsException is thrown to indicate that we are trying to access array element with an illegal index. Occurs in run time.

What are the different ways of copying an array into another array?
A.for loop,  Arrays.copyOf(), System.arraycopy(), Object.clone(), etc.

What is difference between an array and a linked list?
A. Linked List has reference to previous and next node unlike array.

What is DFS and BFS?
A. Breadth first search and Depth first search

What is Recursion?
A. A method calling itself to solve some problem.

What are linear and non linear data Structures?
A. In the linear data structure, the data is organized in a linear order in which elements are linked one after the other. Examples of the
linear data structure are array, queue, stack, linked list, etc. In contrast, tree and graph are the examples of the non-linear data structure

What is Big-(O)-notation?
A. the performance or complexity of an algorithm.

Outlined different kind of sorting algorithm with time complexity?
A.	                Best	 Average	    Worst
  Selection Sort	Ω(n^2)	 θ(n^2)	         O(n^2)
  Bubble Sort	    Ω(n)	  θ(n^2)	     O(n^2)
  Insertion Sort	Ω(n)	  θ(n^2)	      O(n^2)
  Heap Sort	    Ω(n log(n))	  θ(n log(n))	  O(n log(n))
  Quick Sort	Ω(n log(n))	  θ(n log(n))  	O(n^2)
  Merge Sort	Ω(n log(n))	  θ(n log(n)) 	O(n log(n))
  Bucket Sort	Ω(n+k)	       θ(n+k)	       O(n^2)

Draw a table with time complexity in which it will summarize all the data structure feature's advantages and disadvantages.
  a)In terms of Accessing element.
  b)In terms of Inserting element.
  c)In terms of Searching element.
  d)In terms of Removing element.

Common Data Structure Operations
Data Structure	Time Complexity	Space Complexity
                                    Average	                            Worst                               	Worst
                                    Access	Search	Insertion	Deletion	Access	Search	    Insertion       	Deletion
Array	                            Θ(1)	Θ(n)	Θ(n)	Θ(n)	O(1)	O(n)	O(n)	    O(n)	            O(n)
Stack	                            Θ(n)	Θ(n)	Θ(1)	Θ(1)	O(n)	O(n)	O(1)	    O(1)	            O(n)
Queue	                            Θ(n)	Θ(n)	Θ(1)	Θ(1)	O(n)	O(n)	O(1)	    O(1)	             O(n)
Singly-Linked List	                Θ(n)	Θ(n)	Θ(1)	Θ(1)	O(n)	O(n)	O(1)	    O(1)	            O(n)
Doubly-Linked List                 	Θ(n)	 Θ(n)	Θ(1)	Θ(1)	O(n)	O(n)	O(1)	     O(1)	             O(n)
Skip List	                    Θ(log(n))Θ(log(n)) Θ(log(n)) Θ(log(n))	O(n)	O(n)	       	O(n)	    O(n log(n))
Hash Table	N/A	Θ(1)	            Θ(1)	Θ(1)	N/A	O(n)	O(n)	O(n)	     O(n)
Binary Search Tree	                Θ(log(n))   	Θ(log(n))	Θ(log(n))	Θ(log(n)) O(n)	O(n)	O(n)	O(n)	    O(n)
Cartesian Tree	N/A	            Θ(log(n))   	Θ(log(n))	Θ(log(n))	N/A	O(n)	O(n)	O(n)	O(n)
B-Tree	Θ(log(n))	                Θ(log(n))   	Θ(log(n))	Θ(log(n))	O(log(n))	O(log(n))	O(log(n))	O(log(n))	O(n)
Red-Black Tree	                    Θ(log(n))	   Θ(l og(n))	Θ(log(n))	Θ(log(n))	O(log(n))	O(log(n))	O(log(n))	O(log(n))	O(n)
Splay Tree	N/A	                    Θ(log(n))	   log(n))	Θ(log(n))	N/A	O(log(n))	O(log(n))	O(log(n))	O(n)
AVL Tree	                        Θ(log(n))	    Θ(log(n))	Θ(log(n))	Θ(log(n))	O(log(n))	O(log(n))	O(log(n))	O(log(n))	O(n)
KD Tree	Θ(log(n))	                Θ(log(n))	    Θ(log(n))	Θ(log(n))	O(n)	O(n)	O(n)	O(n)	O(n)

